#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.1 on Tue Mar  9 21:37:24 2021
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
		self.tab_configuration = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.panel_sensing = wx.ScrolledWindow(self.tab_configuration, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.panel_sensing2 = wx.ScrolledWindow(self.tab_configuration, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.panel_sensing1 = wx.ScrolledWindow(self.tab_configuration, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.button_sensors_readme = wx.ToggleButton(self.tab_configuration, wx.ID_ANY, _("?"))
		self.sizer_60_copy_1_copy_copy_staticbox = wx.StaticBox(self.tab_configuration, wx.ID_ANY, _("Sensors"))
		self.button_setup_tf = wx.ToggleButton(self.tab_configuration, wx.ID_ANY, _("TF"))
		self.panel_setup_tf = wx.Panel(self.tab_configuration, wx.ID_ANY)
		self.button_setup_tf_readme = wx.ToggleButton(self.tab_configuration, wx.ID_ANY, _("?"))
		self.sizer_3_copy_staticbox = wx.StaticBox(self.tab_configuration, wx.ID_ANY, _("TF (Baselink to Localizer)"))
		self.button_rviz_configuration = wx.ToggleButton(self.tab_configuration, wx.ID_ANY, _("RVIZ"))
		self.button_rqt_configuration = wx.ToggleButton(self.tab_configuration, wx.ID_ANY, _("RQT Graph"))
		self.button_rosbag_configuration = wx.ToggleButton(self.tab_configuration, wx.ID_ANY, _("Rosbag Record"))
		self.tab_perception = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.button_pcd = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("PCD"))
		self.panel_pcd = wx.Panel(self.tab_perception, wx.ID_ANY)
		self.label_point_cloud_bar = wx.StaticText(self.tab_perception, wx.ID_ANY, _("Loading bar ... "), style=wx.ALIGN_CENTER)
		self.button_pcd_readme = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("?"))
		self.button_setup_tf_1 = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("TF"))
		self.panel_2 = wx.Panel(self.tab_perception, wx.ID_ANY)
		self.button_setup_tf_1_readme = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("?"))
		self.sizer_42_copy_staticbox = wx.StaticBox(self.tab_perception, wx.ID_ANY, _("TF (World to Map)"))
		self.sizer_29_staticbox = wx.StaticBox(self.tab_perception, wx.ID_ANY, _("PointCloud Map Loader"))
		self.tree_ctrl_0 = wx.TreeCtrl(self.tab_perception, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.TR_DEFAULT_STYLE | wx.TR_HAS_BUTTONS | wx.TR_NO_LINES)
		self.button_filters_readme = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("?"))
		self.sizer_5_staticbox = wx.StaticBox(self.tab_perception, wx.ID_ANY, _("Filters"))
		self.tree_ctrl_1 = wx.TreeCtrl(self.tab_perception, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.TR_DEFAULT_STYLE | wx.TR_HAS_BUTTONS | wx.TR_NO_LINES)
		self.button_ndt_readme = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("?"))
		self.sizer_6_staticbox = wx.StaticBox(self.tab_perception, wx.ID_ANY, _("Normal Distribution Transform"))
		self.button_rviz_perception = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("RVIZ"))
		self.button_rqt_perception = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("RQT Graph"))
		self.button_rosbag_perception = wx.ToggleButton(self.tab_perception, wx.ID_ANY, _("Rosbag Record"))
		self.tab_planning = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.tree_ctrl_5 = wx.TreeCtrl(self.tab_planning, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.TR_DEFAULT_STYLE | wx.TR_HAS_BUTTONS | wx.TR_NO_LINES)
		self.button_waypoint_maker_readme = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("?"))
		self.tree_ctrl_6 = wx.TreeCtrl(self.tab_planning, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.TR_DEFAULT_STYLE | wx.TR_HAS_BUTTONS | wx.TR_NO_LINES)
		self.button_lane_planner_readme = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("?"))
		self.sizer_7_copy_staticbox = wx.StaticBox(self.tab_planning, wx.ID_ANY, _("Route Planning"))
		self.tree_ctrl_7 = wx.TreeCtrl(self.tab_planning, wx.ID_ANY, style=wx.BORDER_SIMPLE | wx.TR_DEFAULT_STYLE | wx.TR_HAS_BUTTONS | wx.TR_NO_LINES)
		self.button_astar_readme = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("?"))
		self.tree_ctrl_8 = wx.TreeCtrl(self.tab_planning, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.TR_DEFAULT_STYLE | wx.TR_HAS_BUTTONS | wx.TR_NO_LINES)
		self.button_waypoint_follower_readme = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("?"))
		self.sizer_7_staticbox = wx.StaticBox(self.tab_planning, wx.ID_ANY, _("Trajectory Planning"))
		self.button_diagnostics = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("Supervisor"))
		self.panel_2_copy = wx.Panel(self.tab_planning, wx.ID_ANY)
		self.button_diagnostics_readme = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("?"))
		self.sizer_4_copy_copy_staticbox = wx.StaticBox(self.tab_planning, wx.ID_ANY, _("High Level Supervisor"))
		self.button_rviz_planning = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("RVIZ"))
		self.button_rqt_planning = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("RQT Graph"))
		self.button_rosbag_planning = wx.ToggleButton(self.tab_planning, wx.ID_ANY, _("Rosbag Record"))
		self.tab_controls = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.radio_box_vehicle = wx.RadioBox(self.tab_controls, wx.ID_ANY, _("SD Vehicle"), choices=[_("Twizy"), _("eNV200")], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
		self.radio_box_ins = wx.RadioBox(self.tab_controls, wx.ID_ANY, _("GPS/IMU"), choices=[_("OXTS INS"), _("PCAN-GPS"), _("None"), _("CarMaker: GPS")], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
		self.button_vehicle_interface_readme = wx.ToggleButton(self.tab_controls, wx.ID_ANY, _("?"))
		self.radio_box_speed_input = wx.RadioBox(self.tab_controls, wx.ID_ANY, _("Speed Input"), choices=[_("Vehicle CAN"), _("GPS Speed"), _("Localization"), _("CarMaker: Speed")], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
		self.radio_box_run = wx.RadioBox(self.tab_controls, wx.ID_ANY, _("Mode"), choices=[_("Vehicle"), _("Simulation")], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
		self.button_socketcan = wx.ToggleButton(self.tab_controls, wx.ID_ANY, _("Enable Linux\nCAN Driver"))
		self.sizer_24_staticbox = wx.StaticBox(self.tab_controls, wx.ID_ANY, _("Vehicle Interface"))
		self.button_vehicle_interface = wx.ToggleButton(self.tab_controls, wx.ID_ANY, _("GO"))
		self.panel_disclaimer = wx.ScrolledWindow(self.tab_controls, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.label_3 = wx.StaticText(self.panel_disclaimer, wx.ID_ANY, _(u"A safety driver must always be present in the driver's seat at all times and in all environments,\n\u00a0monitoring the vehicle and ready to take control at any time. \nThis software is for research purposes only. Access to and use of this software is at your own \nrisk and responsibility. No warranty expressed or implied."), style=wx.ALIGN_LEFT)
		self.sizer_27_staticbox = wx.StaticBox(self.tab_controls, wx.ID_ANY, _("Disclaimer"))
		self.button_rviz_controls = wx.ToggleButton(self.tab_controls, wx.ID_ANY, _("RVIZ"))
		self.button_rqt_controls = wx.ToggleButton(self.tab_controls, wx.ID_ANY, _("RQT Graph"))
		self.button_rosbag_controls = wx.ToggleButton(self.tab_controls, wx.ID_ANY, _("Rosbag Record"))
		self.tab_tools = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.panel_rosbag_play = wx.Panel(self.tab_tools, wx.ID_ANY)
		self.sizer_79_staticbox = wx.StaticBox(self.tab_tools, wx.ID_ANY, _("Replay Rosbag"))
		self.button_play_rosbag_play = wx.ToggleButton(self.tab_tools, wx.ID_ANY, _("Play"))
		self.button_stop_rosbag_play = wx.ToggleButton(self.tab_tools, wx.ID_ANY, _("Stop"))
		self.button_pause_rosbag_play = wx.ToggleButton(self.tab_tools, wx.ID_ANY, _("Pause"))
		self.label_rosbag_play_bar = wx.StaticText(self.tab_tools, wx.ID_ANY, _("Playing ... 82 %"), style=wx.ALIGN_CENTER)
		self.panel_topics_list = wx.ScrolledWindow(self.tab_tools, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.checkbox_topics_echo = wx.CheckBox(self.tab_tools, wx.ID_ANY, _("Echo"))
		self.text_ctrl_topics_echo = wx.TextCtrl(self.tab_tools, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
		self.panel_topics_info = wx.ScrolledWindow(self.tab_tools, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.label_topics_info = wx.StaticText(self.panel_topics_info, wx.ID_ANY, "")
		self.sizer_36_staticbox = wx.StaticBox(self.tab_tools, wx.ID_ANY, _("Info"))
		self.button_refresh_topics = wx.Button(self.tab_tools, wx.ID_ANY, _("Refresh"))
		self.button_rosbag_tools = wx.ToggleButton(self.tab_tools, wx.ID_ANY, _("ROSBAG"))
		self.button_rviz_tools = wx.ToggleButton(self.tab_tools, wx.ID_ANY, _("RViz"))
		self.button_rqt_tools = wx.ToggleButton(self.tab_tools, wx.ID_ANY, _("RQT"))
		self.tab_simulation = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.button_twizy_sim = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("SD Twizy \n  model"))
		self.hyperlink_1 = wx.HyperlinkCtrl(self.tab_simulation, wx.ID_ANY, _("repo"), _("https://github.com/streetdrone-home/SD-TwizyModel"), style=wx.HL_ALIGN_CENTRE)
		self.static_line_3 = wx.StaticLine(self.tab_simulation, wx.ID_ANY, style=wx.EXPAND)
		self.label_1 = wx.StaticText(self.tab_simulation, wx.ID_ANY, _("Sim World"))
		self.choice_worlds = wx.Choice(self.tab_simulation, wx.ID_ANY, choices=[_("Default"), _("Empty"), _("Shapes"), _("Default Park"), _("SD HQ (Oxford)")])
		self.checkbox_gaz_rviz = wx.CheckBox(self.tab_simulation, wx.ID_ANY, _("Launch RVIZ"))
		self.button_gazebo_readme = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("?"))
		self.tree_ctrl_joystick = wx.TreeCtrl(self.tab_simulation, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.TR_DEFAULT_STYLE | wx.TR_HAS_BUTTONS | wx.TR_NO_LINES)
		self.button_joystick_readme_copy = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("?"))
		self.sizer_35_staticbox = wx.StaticBox(self.tab_simulation, wx.ID_ANY, _("Control"))
		self.hyperlink_1_copy = wx.HyperlinkCtrl(self.tab_simulation, wx.ID_ANY, _("repo"), _("https://github.com/streetdrone-home/SD-TwizyModel"), style=wx.HL_ALIGN_CENTRE)
		self.button_simtime = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("SimTime"))
		self.button_carmaker_setup = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("TF: Setup"))
		self.button_setup_tf_1_readme_copy = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("?"))
		self.sizer_42_copy_copy_staticbox = wx.StaticBox(self.tab_simulation, wx.ID_ANY, _("IPG CarMaker"))
		self.sizer_57_staticbox = wx.StaticBox(self.tab_simulation, wx.ID_ANY, _("Gazebo"))
		self.bitmap_1 = wx.StaticBitmap(self.tab_simulation, wx.ID_ANY, wx.NullBitmap)
		self.button_rviz_simulation = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("RVIZ"))
		self.button_rqt_simulation = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("RQT Graph"))
		self.button_rosbag_simulation = wx.ToggleButton(self.tab_simulation, wx.ID_ANY, _("Rosbag Record"))
		self.bitmap_logo = wx.StaticBitmap(self, wx.ID_ANY, wx.NullBitmap, style=wx.BORDER_STATIC)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoSensors, self.button_sensors_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_setup_tf)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoTF1, self.button_setup_tf_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rviz_configuration)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rqt_configuration)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagRecord, self.button_rosbag_configuration)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_pcd)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoPCD, self.button_pcd_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_setup_tf_1)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoTF2, self.button_setup_tf_1_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoFilters, self.button_filters_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoNDT, self.button_ndt_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rviz_perception)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rqt_perception)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagRecord, self.button_rosbag_perception)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoRoute1, self.button_waypoint_maker_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoRoute2, self.button_lane_planner_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoTraj1, self.button_astar_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoTraj2, self.button_waypoint_follower_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_diagnostics)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoSup, self.button_diagnostics_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rviz_planning)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rqt_planning)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagRecord, self.button_rosbag_planning)
		self.Bind(wx.EVT_RADIOBOX, self.OnSetupVehicleInterface, self.radio_box_vehicle)
		self.Bind(wx.EVT_RADIOBOX, self.OnSetupVehicleInterface, self.radio_box_ins)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoVI, self.button_vehicle_interface_readme)
		self.Bind(wx.EVT_RADIOBOX, self.OnSetupVehicleInterface, self.radio_box_speed_input)
		self.Bind(wx.EVT_RADIOBOX, self.OnSetupVehicleInterface, self.radio_box_run)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_socketcan)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_vehicle_interface)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rviz_controls)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rqt_controls)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagRecord, self.button_rosbag_controls)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagPlay, self.button_play_rosbag_play)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagPlay, self.button_stop_rosbag_play)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagPlay, self.button_pause_rosbag_play)
		self.Bind(wx.EVT_CHECKBOX, self.OnEcho, self.checkbox_topics_echo)
		self.Bind(wx.EVT_BUTTON, self.OnRefreshTopics, self.button_refresh_topics)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagRecord, self.button_rosbag_tools)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rviz_tools)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rqt_tools)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_twizy_sim)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoSim, self.button_gazebo_readme)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoControl, self.button_joystick_readme_copy)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_simtime)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_carmaker_setup)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnInfoIPG, self.button_setup_tf_1_readme_copy)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rviz_simulation)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLaunchKill, self.button_rqt_simulation)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnROSbagRecord, self.button_rosbag_simulation)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle(_("Project ASLAN"))
		self.panel_sensing.SetScrollRate(10, 10)
		self.panel_sensing2.SetScrollRate(10, 10)
		self.panel_sensing1.SetScrollRate(10, 10)
		self.button_sensors_readme.SetMinSize((26, 26))
		self.button_sensors_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_setup_tf_readme.SetMinSize((26, 26))
		self.button_setup_tf_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.tab_configuration.SetFont(wx.Font(11, wx.SWISS, wx.NORMAL, wx.NORMAL, 0, ""))
		self.label_point_cloud_bar.SetMinSize((664, 18))
		self.label_point_cloud_bar.SetForegroundColour(wx.Colour(30, 148, 12))
		self.button_pcd_readme.SetMinSize((26, 26))
		self.button_pcd_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_setup_tf_1_readme.SetMinSize((26, 26))
		self.button_setup_tf_1_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_filters_readme.SetMinSize((26, 26))
		self.button_filters_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_ndt_readme.SetMinSize((26, 26))
		self.button_ndt_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_waypoint_maker_readme.SetMinSize((26, 26))
		self.button_waypoint_maker_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_lane_planner_readme.SetMinSize((26, 26))
		self.button_lane_planner_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_astar_readme.SetMinSize((26, 26))
		self.button_astar_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_waypoint_follower_readme.SetMinSize((26, 26))
		self.button_waypoint_follower_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_diagnostics_readme.SetMinSize((26, 26))
		self.button_diagnostics_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.radio_box_vehicle.SetMinSize((230, 68))
		self.radio_box_vehicle.SetSelection(1)
		self.radio_box_ins.SetMinSize((280, 68))
		self.radio_box_ins.SetSelection(1)
		self.button_vehicle_interface_readme.SetMinSize((26, 26))
		self.button_vehicle_interface_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.radio_box_speed_input.SetMinSize((270, 68))
		self.radio_box_speed_input.SetSelection(1)
		self.radio_box_run.SetMinSize((260, 68))
		self.radio_box_run.SetSelection(1)
		self.button_vehicle_interface.SetBackgroundColour(wx.Colour(0, 171, 102))
		self.button_vehicle_interface.SetForegroundColour(wx.Colour(255, 255, 255))
		self.button_vehicle_interface.SetFont(wx.Font(13, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
		self.panel_disclaimer.SetScrollRate(10, 10)
		self.button_stop_rosbag_play.Enable(False)
		self.button_pause_rosbag_play.Enable(False)
		self.label_rosbag_play_bar.SetMinSize((506, 10))
		self.label_rosbag_play_bar.SetForegroundColour(wx.Colour(30, 148, 12))
		self.panel_topics_list.SetScrollRate(10, 10)
		self.panel_topics_info.SetScrollRate(10, 10)
		self.choice_worlds.SetSelection(0)
		self.checkbox_gaz_rviz.SetValue(1)
		self.button_gazebo_readme.SetMinSize((26, 26))
		self.button_gazebo_readme.SetForegroundColour(wx.Colour(35, 142, 35))
		self.tree_ctrl_joystick.SetMinSize((463, 40))
		self.button_joystick_readme_copy.SetMinSize((26, 26))
		self.button_joystick_readme_copy.SetForegroundColour(wx.Colour(35, 142, 35))
		self.button_setup_tf_1_readme_copy.SetMinSize((26, 26))
		self.button_setup_tf_1_readme_copy.SetForegroundColour(wx.Colour(35, 142, 35))
		self.notebook_1.SetFont(wx.Font(11, wx.SWISS, wx.NORMAL, wx.NORMAL, 0, ""))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		self.sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_55 = wx.BoxSizer(wx.VERTICAL)
		sizer_35_copy_copy_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_57_staticbox.Lower()
		sizer_57 = wx.StaticBoxSizer(self.sizer_57_staticbox, wx.VERTICAL)
		self.sizer_42_copy_copy_staticbox.Lower()
		sizer_42_copy_copy = wx.StaticBoxSizer(self.sizer_42_copy_copy_staticbox, wx.HORIZONTAL)
		sizer_58 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_16 = wx.BoxSizer(wx.VERTICAL)
		sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_20 = wx.BoxSizer(wx.VERTICAL)
		sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_35_staticbox.Lower()
		sizer_35 = wx.StaticBoxSizer(self.sizer_35_staticbox, wx.HORIZONTAL)
		sizer_38 = wx.BoxSizer(wx.VERTICAL)
		sizer_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_78 = wx.BoxSizer(wx.VERTICAL)
		sizer_85_copy = wx.BoxSizer(wx.VERTICAL)
		sizer_51_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_52_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_60_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_32_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_34_copy_1 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_36_staticbox.Lower()
		sizer_36 = wx.StaticBoxSizer(self.sizer_36_staticbox, wx.HORIZONTAL)
		sizer_topics_info = wx.BoxSizer(wx.VERTICAL)
		sizer_35_copy = wx.BoxSizer(wx.VERTICAL)
		self.sizer_topics_list = wx.BoxSizer(wx.VERTICAL)
		sizer_78_copy = wx.BoxSizer(wx.VERTICAL)
		sizer_80 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_82 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_81 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_79_staticbox.Lower()
		sizer_79 = wx.StaticBoxSizer(self.sizer_79_staticbox, wx.VERTICAL)
		sizer_8 = wx.BoxSizer(wx.VERTICAL)
		sizer_35_copy_copy_copy_4 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_27_staticbox.Lower()
		sizer_27 = wx.StaticBoxSizer(self.sizer_27_staticbox, wx.HORIZONTAL)
		sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_10 = wx.BoxSizer(wx.VERTICAL)
		sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_24_staticbox.Lower()
		sizer_24 = wx.StaticBoxSizer(self.sizer_24_staticbox, wx.VERTICAL)
		sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_9 = wx.BoxSizer(wx.VERTICAL)
		sizer_35_copy_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_4_copy_copy_staticbox.Lower()
		sizer_4_copy_copy = wx.StaticBoxSizer(self.sizer_4_copy_copy_staticbox, wx.HORIZONTAL)
		self.sizer_7_staticbox.Lower()
		sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
		self.sizer_7_copy_staticbox.Lower()
		sizer_7_copy = wx.StaticBoxSizer(self.sizer_7_copy_staticbox, wx.HORIZONTAL)
		sizer_26 = wx.BoxSizer(wx.VERTICAL)
		sizer_35_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_6_staticbox.Lower()
		sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
		self.sizer_5_staticbox.Lower()
		sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
		sizer_65_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_29_staticbox.Lower()
		sizer_29 = wx.StaticBoxSizer(self.sizer_29_staticbox, wx.VERTICAL)
		self.sizer_42_copy_staticbox.Lower()
		sizer_42_copy = wx.StaticBoxSizer(self.sizer_42_copy_staticbox, wx.HORIZONTAL)
		sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_56 = wx.BoxSizer(wx.VERTICAL)
		sizer_40 = wx.BoxSizer(wx.VERTICAL)
		sizer_35_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_3_copy_staticbox.Lower()
		sizer_3_copy = wx.StaticBoxSizer(self.sizer_3_copy_staticbox, wx.HORIZONTAL)
		sizer_46 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_60_copy_1_copy_copy_staticbox.Lower()
		sizer_60_copy_1_copy_copy = wx.StaticBoxSizer(self.sizer_60_copy_1_copy_copy_staticbox, wx.HORIZONTAL)
		sizer_19 = wx.BoxSizer(wx.VERTICAL)
		sizer_46.Add((20, 8), 0, wx.EXPAND, 0)
		sizer_19.Add(self.panel_sensing, 2, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		sizer_19.Add(self.panel_sensing2, 1, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
		sizer_60_copy_1_copy_copy.Add(sizer_19, 2, wx.EXPAND, 0)
		sizer_60_copy_1_copy_copy.Add(self.panel_sensing1, 2, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		sizer_60_copy_1_copy_copy.Add(self.button_sensors_readme, 0, wx.ALL, 0)
		sizer_46.Add(sizer_60_copy_1_copy_copy, 4, wx.ALL | wx.EXPAND, 1)
		sizer_40.Add(sizer_46, 1, wx.EXPAND, 0)
		sizer_2.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_3_copy.Add(self.button_setup_tf, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_3_copy.Add(self.panel_setup_tf, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 4)
		sizer_3_copy.Add(self.button_setup_tf_readme, 0, wx.ALL, 0)
		sizer_2.Add(sizer_3_copy, 0, wx.EXPAND, 0)
		sizer_2.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_40.Add(sizer_2, 0, wx.EXPAND, 0)
		sizer_35_copy_copy.Add(self.button_rviz_configuration, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy.Add(self.button_rqt_configuration, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy.Add(self.button_rosbag_configuration, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_40.Add(sizer_35_copy_copy, 0, wx.FIXED_MINSIZE, 0)
		self.tab_configuration.SetSizer(sizer_40)
		sizer_32.Add(self.button_pcd, 0, wx.ALL, 0)
		sizer_56.Add(self.panel_pcd, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		sizer_56.Add(self.label_point_cloud_bar, 1, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 4)
		sizer_32.Add(sizer_56, 1, wx.EXPAND, 0)
		sizer_32.Add(self.button_pcd_readme, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_29.Add(sizer_32, 0, wx.EXPAND, 0)
		sizer_42_copy.Add(self.button_setup_tf_1, 0, wx.ALL, 4)
		sizer_42_copy.Add(self.panel_2, 1, wx.EXPAND, 0)
		sizer_42_copy.Add(self.button_setup_tf_1_readme, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 0)
		sizer_29.Add(sizer_42_copy, 0, wx.ALIGN_CENTER | wx.EXPAND, 0)
		sizer_26.Add(sizer_29, 0, wx.EXPAND, 0)
		sizer_26.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_65_copy_copy_copy.Add(self.tree_ctrl_0, 1, wx.ALL | wx.EXPAND, 0)
		sizer_65_copy_copy_copy.Add(self.button_filters_readme, 0, wx.ALL, 0)
		sizer_5.Add(sizer_65_copy_copy_copy, 1, wx.EXPAND, 0)
		sizer_25.Add(sizer_5, 1, wx.EXPAND, 0)
		sizer_6.Add(self.tree_ctrl_1, 1, wx.ALL | wx.EXPAND, 0)
		sizer_6.Add(self.button_ndt_readme, 0, wx.ALL, 0)
		sizer_25.Add(sizer_6, 1, wx.EXPAND, 0)
		sizer_26.Add(sizer_25, 1, wx.EXPAND, 0)
		sizer_26.Add((24, 25), 0, wx.EXPAND, 0)
		sizer_35_copy_copy_copy.Add(self.button_rviz_perception, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy.Add(self.button_rqt_perception, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy.Add(self.button_rosbag_perception, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_26.Add(sizer_35_copy_copy_copy, 0, wx.FIXED_MINSIZE, 0)
		self.tab_perception.SetSizer(sizer_26)
		sizer_7_copy.Add(self.tree_ctrl_5, 1, wx.ALL | wx.EXPAND, 0)
		sizer_7_copy.Add(self.button_waypoint_maker_readme, 0, 0, 0)
		sizer_7_copy.Add(self.tree_ctrl_6, 1, wx.ALL | wx.EXPAND, 0)
		sizer_7_copy.Add(self.button_lane_planner_readme, 0, 0, 0)
		sizer_9.Add(sizer_7_copy, 1, wx.EXPAND, 0)
		sizer_7.Add(self.tree_ctrl_7, 1, wx.ALL | wx.EXPAND, 0)
		sizer_7.Add(self.button_astar_readme, 0, 0, 0)
		sizer_7.Add(self.tree_ctrl_8, 1, wx.ALL | wx.EXPAND, 0)
		sizer_7.Add(self.button_waypoint_follower_readme, 0, 0, 0)
		sizer_9.Add(sizer_7, 1, wx.EXPAND, 0)
		sizer_9.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_4_copy_copy.Add(self.button_diagnostics, 0, wx.ALL, 4)
		sizer_4_copy_copy.Add(self.panel_2_copy, 1, wx.EXPAND, 0)
		sizer_4_copy_copy.Add(self.button_diagnostics_readme, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_28.Add(sizer_4_copy_copy, 0, wx.ALL | wx.EXPAND, 0)
		sizer_28.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_9.Add(sizer_28, 0, wx.EXPAND, 0)
		sizer_35_copy_copy_copy_1.Add(self.button_rviz_planning, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy_1.Add(self.button_rqt_planning, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy_1.Add(self.button_rosbag_planning, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_9.Add(sizer_35_copy_copy_copy_1, 0, wx.FIXED_MINSIZE, 0)
		self.tab_planning.SetSizer(sizer_9)
		sizer_21.Add(self.radio_box_vehicle, 0, wx.ALL | wx.EXPAND, 4)
		sizer_21.Add(self.radio_box_ins, 0, wx.ALL | wx.EXPAND, 4)
		sizer_33.Add(sizer_21, 0, wx.EXPAND, 0)
		sizer_33.Add((20, 20), 1, wx.EXPAND, 0)
		sizer_33.Add(self.button_vehicle_interface_readme, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_24.Add(sizer_33, 0, wx.EXPAND, 0)
		sizer_13.Add(self.radio_box_speed_input, 0, wx.ALL | wx.EXPAND, 4)
		sizer_13.Add(self.radio_box_run, 0, wx.ALL | wx.EXPAND, 4)
		sizer_13.Add(self.button_socketcan, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_15.Add(sizer_13, 1, wx.EXPAND, 0)
		sizer_24.Add(sizer_15, 0, wx.EXPAND, 0)
		sizer_34.Add(sizer_24, 2, wx.EXPAND, 0)
		sizer_10.Add(sizer_34, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
		sizer_10.Add((20, 15), 0, wx.EXPAND, 0)
		sizer_10.Add(self.button_vehicle_interface, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL | wx.EXPAND, 0)
		sizer_8.Add(sizer_10, 0, wx.EXPAND, 1)
		sizer_8.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_14.Add(self.label_3, 1, wx.ADJUST_MINSIZE | wx.EXPAND, 0)
		self.panel_disclaimer.SetSizer(sizer_14)
		sizer_27.Add(self.panel_disclaimer, 2, wx.EXPAND, 0)
		sizer_8.Add(sizer_27, 1, wx.EXPAND, 0)
		sizer_8.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_35_copy_copy_copy_4.Add(self.button_rviz_controls, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy_4.Add(self.button_rqt_controls, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy_4.Add(self.button_rosbag_controls, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_8.Add(sizer_35_copy_copy_copy_4, 0, wx.FIXED_MINSIZE, 0)
		self.tab_controls.SetSizer(sizer_8)
		sizer_79.Add(self.panel_rosbag_play, 1, wx.ALL | wx.EXPAND, 4)
		sizer_78_copy.Add(sizer_79, 0, wx.ALL | wx.EXPAND, 4)
		sizer_81.Add(self.button_play_rosbag_play, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_81.Add(self.button_stop_rosbag_play, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_81.Add(self.button_pause_rosbag_play, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_80.Add(sizer_81, 0, wx.EXPAND, 0)
		sizer_82.Add(self.label_rosbag_play_bar, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 4)
		sizer_80.Add(sizer_82, 1, wx.EXPAND, 0)
		sizer_78_copy.Add(sizer_80, 1, wx.ALL | wx.EXPAND, 4)
		sizer_78.Add(sizer_78_copy, 0, wx.EXPAND, 0)
		self.panel_topics_list.SetSizer(self.sizer_topics_list)
		sizer_32_copy.Add(self.panel_topics_list, 1, wx.EXPAND, 0)
		sizer_35_copy.Add(self.checkbox_topics_echo, 0, wx.LEFT, 4)
		sizer_35_copy.Add(self.text_ctrl_topics_echo, 2, wx.ALL | wx.EXPAND, 4)
		sizer_34_copy_1.Add(sizer_35_copy, 2, wx.EXPAND, 0)
		sizer_topics_info.Add(self.label_topics_info, 0, 0, 0)
		self.panel_topics_info.SetSizer(sizer_topics_info)
		sizer_36.Add(self.panel_topics_info, 2, wx.EXPAND, 0)
		sizer_34_copy_1.Add(sizer_36, 2, wx.EXPAND, 0)
		sizer_32_copy.Add(sizer_34_copy_1, 1, wx.EXPAND, 0)
		sizer_85_copy.Add(sizer_32_copy, 2, wx.EXPAND, 0)
		sizer_60_copy_copy.Add(self.button_refresh_topics, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_51_copy_copy.Add(sizer_60_copy_copy, 1, wx.EXPAND, 0)
		sizer_52_copy_1_copy.Add(self.button_rosbag_tools, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_52_copy_1_copy.Add(self.button_rviz_tools, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_52_copy_1_copy.Add(self.button_rqt_tools, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_51_copy_copy.Add(sizer_52_copy_1_copy, 0, wx.EXPAND, 0)
		sizer_85_copy.Add(sizer_51_copy_copy, 0, wx.EXPAND, 0)
		sizer_78.Add(sizer_85_copy, 1, wx.EXPAND, 0)
		sizer_78.Add((20, 5), 0, wx.EXPAND, 0)
		self.tab_tools.SetSizer(sizer_78)
		sizer_4.Add(self.button_twizy_sim, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL | wx.EXPAND, 0)
		sizer_4.Add(self.hyperlink_1, 0, wx.ALIGN_BOTTOM, 0)
		sizer_58.Add(sizer_4, 0, 0, 0)
		sizer_58.Add(self.static_line_3, 0, wx.ALL | wx.EXPAND, 0)
		sizer_58.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_38.Add(self.label_1, 0, 0, 0)
		sizer_38.Add(self.choice_worlds, 0, wx.ALL, 0)
		sizer_38.Add(self.checkbox_gaz_rviz, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
		sizer_37.Add(sizer_38, 0, wx.EXPAND, 0)
		sizer_37.Add(self.button_gazebo_readme, 0, wx.ALIGN_RIGHT | wx.ALL, 0)
		sizer_37.Add((30, 20), 0, wx.EXPAND, 0)
		sizer_35.Add(self.tree_ctrl_joystick, 1, wx.ALL, 0)
		sizer_35.Add(self.button_joystick_readme_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_37.Add(sizer_35, 1, wx.ALL | wx.EXPAND, 0)
		sizer_20.Add(sizer_37, 0, wx.EXPAND, 0)
		sizer_18.Add(sizer_20, 1, wx.EXPAND, 0)
		sizer_16.Add(sizer_18, 1, wx.EXPAND, 0)
		sizer_58.Add(sizer_16, 1, wx.EXPAND, 0)
		sizer_57.Add(sizer_58, 1, wx.ALL | wx.EXPAND, 0)
		sizer_57.Add((20, 20), 0, wx.EXPAND, 0)
		sizer_42_copy_copy.Add(self.hyperlink_1_copy, 0, wx.ALIGN_BOTTOM, 0)
		sizer_42_copy_copy.Add((10, 20), 1, wx.EXPAND, 0)
		sizer_42_copy_copy.Add(self.button_simtime, 0, wx.ALL, 4)
		sizer_42_copy_copy.Add(self.button_carmaker_setup, 0, wx.ALL, 4)
		sizer_42_copy_copy.Add(self.button_setup_tf_1_readme_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 0)
		sizer_57.Add(sizer_42_copy_copy, 0, wx.ALIGN_CENTER | wx.EXPAND, 0)
		sizer_55.Add(sizer_57, 0, wx.EXPAND, 0)
		sizer_3.Add(self.bitmap_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
		sizer_55.Add(sizer_3, 1, 0, 0)
		sizer_35_copy_copy_copy_3.Add(self.button_rviz_simulation, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy_3.Add(self.button_rqt_simulation, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_35_copy_copy_copy_3.Add(self.button_rosbag_simulation, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)
		sizer_55.Add(sizer_35_copy_copy_copy_3, 0, wx.FIXED_MINSIZE, 0)
		self.tab_simulation.SetSizer(sizer_55)
		self.notebook_1.AddPage(self.tab_configuration, _("Configuration"))
		self.notebook_1.AddPage(self.tab_perception, _("Perception"))
		self.notebook_1.AddPage(self.tab_planning, _("Planning"))
		self.notebook_1.AddPage(self.tab_controls, _("Controls"))
		self.notebook_1.AddPage(self.tab_tools, _("Tools"))
		self.notebook_1.AddPage(self.tab_simulation, _("Simulation"))
		self.sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
		self.sizer_1.Add(self.bitmap_logo, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)
		self.SetSizer(self.sizer_1)
		self.sizer_1.Fit(self)
		self.Layout()
		# end wxGlade

	def OnInfoSensors(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoSensors' not implemented!"
		event.Skip()

	def OnLaunchKill(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnLaunchKill' not implemented!"
		event.Skip()

	def OnInfoTF1(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoTF1' not implemented!"
		event.Skip()

	def OnROSbagRecord(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnROSbagRecord' not implemented!"
		event.Skip()

	def OnInfoPCD(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoPCD' not implemented!"
		event.Skip()

	def OnInfoTF2(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoTF2' not implemented!"
		event.Skip()

	def OnInfoFilters(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoFilters' not implemented!"
		event.Skip()

	def OnInfoNDT(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoNDT' not implemented!"
		event.Skip()

	def OnInfoRoute1(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoRoute1' not implemented!"
		event.Skip()

	def OnInfoRoute2(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoRoute2' not implemented!"
		event.Skip()

	def OnInfoTraj1(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoTraj1' not implemented!"
		event.Skip()

	def OnInfoTraj2(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoTraj2' not implemented!"
		event.Skip()

	def OnInfoSup(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoSup' not implemented!"
		event.Skip()

	def OnSetupVehicleInterface(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnSetupVehicleInterface' not implemented!"
		event.Skip()

	def OnInfoVI(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoVI' not implemented!"
		event.Skip()

	def OnROSbagPlay(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnROSbagPlay' not implemented!"
		event.Skip()

	def OnEcho(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnEcho' not implemented!"
		event.Skip()

	def OnRefreshTopics(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnRefreshTopics' not implemented!"
		event.Skip()

	def OnInfoSim(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoSim' not implemented!"
		event.Skip()

	def OnInfoControl(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoControl' not implemented!"
		event.Skip()

	def OnInfoIPG(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnInfoIPG' not implemented!"
		event.Skip()

# end of class MyFrame

class MyDialogParam(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogParam.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.panel_v = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.button_1 = wx.Button(self, wx.ID_ANY, _("OK"))
		self.button_1_copy = wx.Button(self, wx.ID_ANY, _("Cancel"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_1)
		self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_1_copy)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogParam.__set_properties
		self.SetTitle(_("dialog_3"))
		self.SetSize((470, 356))
		self.panel_v.SetScrollRate(10, 10)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogParam.__do_layout
		sizer_30 = wx.BoxSizer(wx.VERTICAL)
		sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_v = wx.BoxSizer(wx.VERTICAL)
		self.panel_v.SetSizer(self.sizer_v)
		sizer_30.Add(self.panel_v, 1, wx.EXPAND, 0)
		sizer_31.Add(self.button_1, 0, wx.ALL, 4)
		sizer_31.Add(self.button_1_copy, 0, wx.ALL, 4)
		sizer_30.Add(sizer_31, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		self.SetSizer(sizer_30)
		self.Layout()
		# end wxGlade

	def OnOk(self, event):  # wxGlade: MyDialogParam.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()

	def OnCancel(self, event):  # wxGlade: MyDialogParam.<event_handler>
		print "Event handler 'OnCancel' not implemented!"
		event.Skip()

# end of class MyDialogParam

class MyDialogROSbagRecord(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogROSbagRecord.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.text_ctrl = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ref = wx.Button(self, wx.ID_ANY, _("Ref"))
		self.checkbox_split = wx.CheckBox(self, wx.ID_ANY, _("split"))
		self.label_2 = wx.StaticText(self, wx.ID_ANY, _("size"))
		self.text_ctrl_size = wx.TextCtrl(self, wx.ID_ANY, "")
		self.label_2_copy = wx.StaticText(self, wx.ID_ANY, _("MB"))
		self.button_start = wx.Button(self, wx.ID_ANY, _("Start"))
		self.button_stop = wx.Button(self, wx.ID_ANY, _("Stop"))
		self.panel_1 = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.button_refresh = wx.Button(self, wx.ID_ANY, _("Refresh"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref)
		self.Bind(wx.EVT_BUTTON, self.OnStart, self.button_start)
		self.Bind(wx.EVT_BUTTON, self.OnStop, self.button_stop)
		self.Bind(wx.EVT_BUTTON, self.OnRefresh, self.button_refresh)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogROSbagRecord.__set_properties
		self.SetTitle(_("ROSBAG Record"))
		self.SetSize((300, 486))
		self.button_ref.SetMinSize((40, 29))
		self.text_ctrl_size.SetMinSize((50, 27))
		self.button_stop.Enable(False)
		self.panel_1.SetScrollRate(10, 10)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogROSbagRecord.__do_layout
		sizer_41 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_topic = wx.BoxSizer(wx.VERTICAL)
		sizer_44 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_1.Add(self.text_ctrl, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy_1.Add(self.button_ref, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_41.Add(sizer_28_copy_1, 0, wx.EXPAND, 0)
		sizer_22.Add(self.checkbox_split, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_23.Add(self.label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_23.Add(self.text_ctrl_size, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_23.Add(self.label_2_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_22.Add(sizer_23, 1, wx.EXPAND | wx.LEFT, 20)
		sizer_41.Add(sizer_22, 0, wx.EXPAND, 0)
		sizer_44.Add(self.button_start, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_44.Add(self.button_stop, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		sizer_41.Add(sizer_44, 0, wx.EXPAND, 0)
		self.panel_1.SetSizer(self.sizer_topic)
		sizer_41.Add(self.panel_1, 1, wx.EXPAND, 0)
		sizer_41.Add(self.button_refresh, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
		self.SetSizer(sizer_41)
		self.Layout()
		# end wxGlade

	def OnRef(self, event):  # wxGlade: MyDialogROSbagRecord.<event_handler>
		print "Event handler 'OnRef' not implemented!"
		event.Skip()

	def OnStart(self, event):  # wxGlade: MyDialogROSbagRecord.<event_handler>
		print "Event handler 'OnStart' not implemented!"
		event.Skip()

	def OnStop(self, event):  # wxGlade: MyDialogROSbagRecord.<event_handler>
		print "Event handler 'OnStop' not implemented!"
		event.Skip()

	def OnRefresh(self, event):  # wxGlade: MyDialogROSbagRecord.<event_handler>
		print "Event handler 'OnRefresh' not implemented!"
		event.Skip()

# end of class MyDialogROSbagRecord

class MyDialogNDTMapping(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogNDTMapping.__init__
		kwds["style"] = wx.CAPTION
		wx.Dialog.__init__(self, *args, **kwds)
		self.panel_v = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.static_line_1 = wx.StaticLine(self, wx.ID_ANY)
		self.text_ctrl_path = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ref_path = wx.Button(self, wx.ID_ANY, _("Ref"))
		self.radio_btn_filter_resolution = wx.RadioButton(self, wx.ID_ANY, _("Filter Resolution"))
		self.text_ctrl_filter_resolution = wx.TextCtrl(self, wx.ID_ANY, _("0.2"))
		self.radio_btn_original = wx.RadioButton(self, wx.ID_ANY, _("Original"))
		self.button_3 = wx.Button(self, wx.ID_ANY, _("PCD OUTPUT"))
		self.static_line_2 = wx.StaticLine(self, wx.ID_ANY)
		self.button_1 = wx.Button(self, wx.ID_ANY, _("Close"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_path)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnRadio, self.radio_btn_filter_resolution)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnRadio, self.radio_btn_original)
		self.Bind(wx.EVT_BUTTON, self.OnPcdOutput, self.button_3)
		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_1)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogNDTMapping.__set_properties
		self.SetTitle(_("ndt_mapping"))
		self.SetSize((352, 397))
		self.panel_v.SetScrollRate(10, 10)
		self.button_ref_path.SetMinSize((40, 29))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogNDTMapping.__do_layout
		sizer_30 = wx.BoxSizer(wx.VERTICAL)
		sizer_48 = wx.BoxSizer(wx.VERTICAL)
		sizer_49 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_30.Add(self.panel_v, 1, wx.EXPAND, 0)
		sizer_30.Add(self.static_line_1, 0, wx.EXPAND, 0)
		sizer_28_copy_1.Add(self.text_ctrl_path, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy_1.Add(self.button_ref_path, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_48.Add(sizer_28_copy_1, 0, wx.ALL | wx.EXPAND, 4)
		sizer_49.Add(self.radio_btn_filter_resolution, 0, wx.ALL, 4)
		sizer_49.Add(self.text_ctrl_filter_resolution, 0, wx.ALL, 4)
		sizer_49.Add(self.radio_btn_original, 0, wx.ALL, 4)
		sizer_48.Add(sizer_49, 0, wx.ALL | wx.EXPAND, 4)
		sizer_48.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)
		sizer_30.Add(sizer_48, 0, wx.EXPAND, 0)
		sizer_30.Add(self.static_line_2, 0, wx.EXPAND, 0)
		sizer_30.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)
		self.SetSizer(sizer_30)
		self.Layout()
		# end wxGlade

	def OnRef(self, event):  # wxGlade: MyDialogNDTMapping.<event_handler>
		print "Event handler 'OnRef' not implemented!"
		event.Skip()

	def OnRadio(self, event):  # wxGlade: MyDialogNDTMapping.<event_handler>
		print "Event handler 'OnRadio' not implemented!"
		event.Skip()

	def OnPcdOutput(self, event):  # wxGlade: MyDialogNDTMapping.<event_handler>
		print "Event handler 'OnPcdOutput' not implemented!"
		event.Skip()

	def OnOk(self, event):  # wxGlade: MyDialogNDTMapping.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()

# end of class MyDialogNDTMapping

class MyDialogWaypointLoader(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogWaypointLoader.__init__
		kwds["style"] = wx.CAPTION
		wx.Dialog.__init__(self, *args, **kwds)
		self.panel_v = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.static_line_1 = wx.StaticLine(self, wx.ID_ANY)
		self.button_3 = wx.Button(self, wx.ID_ANY, _("CSV OUTPUT"))
		self.static_line_2 = wx.StaticLine(self, wx.ID_ANY)
		self.button_1 = wx.Button(self, wx.ID_ANY, _("Close"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnCsvOutput, self.button_3)
		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_1)
	# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogWaypointLoader.__set_properties
		self.SetTitle(_("waypoint_loader"))
		self.SetSize((600, 500))
		self.panel_v.SetScrollRate(10, 10)
	# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogWaypointLoader.__do_layout
		sizer_30 = wx.BoxSizer(wx.VERTICAL)
		sizer_48 = wx.BoxSizer(wx.VERTICAL)
		sizer_49 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_30.Add(self.panel_v, 1, wx.EXPAND, 0)
		sizer_30.Add(self.static_line_1, 0, wx.EXPAND, 0)
		sizer_48.Add(sizer_28_copy_1, 0, wx.ALL | wx.EXPAND, 4)
		sizer_48.Add(sizer_49, 0, wx.ALL | wx.EXPAND, 4)
		sizer_48.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)
		sizer_30.Add(sizer_48, 0, wx.EXPAND, 0)
		sizer_30.Add(self.static_line_2, 0, wx.EXPAND, 0)
		sizer_30.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)
		self.SetSizer(sizer_30)
		self.Layout()
	# end wxGlade

	def OnCsvOutput(self, event):  # wxGlade: MyDialogNdtMapping.<event_handler>
		print "Event handler 'OnCsvOutput' not implemented!"
		event.Skip()

	def OnOk(self, event):  # wxGlade: MyDialogNdtMapping.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()
